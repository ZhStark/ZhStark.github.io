<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小豪&#39;s blog</title>
  
  <subtitle>痛无止境 学无止境</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zhstark.com/"/>
  <updated>2019-02-16T21:44:43.420Z</updated>
  <id>http://zhstark.com/</id>
  
  <author>
    <name>Hao Zhao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python学习笔记2</title>
    <link href="http://zhstark.com/2019/02/16/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/"/>
    <id>http://zhstark.com/2019/02/16/python学习笔记2/</id>
    <published>2019-02-16T21:43:00.000Z</published>
    <updated>2019-02-16T21:44:43.420Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="位操作符"><a href="#位操作符" class="headerlink" title="位操作符"></a>位操作符</h2><p><img src="/images/Screen Shot 2018-11-12 at 7.21.06 PM.png" alt=""></p><h2 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h2><h4 id="eval"><a href="#eval" class="headerlink" title="eval( )"></a>eval( )</h4><p>eval() 函数用来执行一个字符串表达式，并返回表达式的值。</p><h4 id="range-倒序"><a href="#range-倒序" class="headerlink" title="range( ) 倒序"></a>range( ) 倒序</h4><p><code>range(a,b,-1)</code></p><h4 id="enumerate-函数"><a href="#enumerate-函数" class="headerlink" title="enumerate( ) 函数"></a>enumerate( ) 函数</h4><p><code>enumerate()</code> 函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;seasons = [<span class="string">'Spring'</span>, <span class="string">'Summer'</span>, <span class="string">'Fall'</span>, <span class="string">'Winter'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(enumerate(seasons))</div><div class="line">[(<span class="number">0</span>, <span class="string">'Spring'</span>), (<span class="number">1</span>, <span class="string">'Summer'</span>), (<span class="number">2</span>, <span class="string">'Fall'</span>), (<span class="number">3</span>, <span class="string">'Winter'</span>)]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(enumerate(seasons, start=<span class="number">1</span>))       <span class="comment"># 下标从 1 开始</span></div><div class="line">[(<span class="number">1</span>, <span class="string">'Spring'</span>), (<span class="number">2</span>, <span class="string">'Summer'</span>), (<span class="number">3</span>, <span class="string">'Fall'</span>), (<span class="number">4</span>, <span class="string">'Winter'</span>)]</div><div class="line"></div><div class="line">&gt;&gt;&gt;seq = [<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i, element <span class="keyword">in</span> enumerate(seq):</div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> i, element</div><div class="line">...</div><div class="line"><span class="number">0</span> one</div><div class="line"><span class="number">1</span> two</div><div class="line"><span class="number">2</span> three</div></pre></td></tr></table></figure><h4 id="filter-函数"><a href="#filter-函数" class="headerlink" title="filter( ) 函数"></a>filter( ) 函数</h4><p>filter() 函数用于过滤序列，过滤掉不符合条件的元素，返回一个迭代器对象，如果要转换为列表，可以使用 <code>list()</code> 来转换。</p><p>该接收两个参数，第一个为函数，第二个为序列，序列的每个元素作为参数传递给函数进行判，然后返回 True 或 False，最后将返回 True 的元素放到新列表中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python3</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_odd</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">return</span> n % <span class="number">2</span> == <span class="number">1</span></div><div class="line"></div><div class="line">tmplist = filter(is_odd, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>])</div><div class="line">newlist = list(tmplist)</div><div class="line">print(newlist)</div><div class="line"></div><div class="line">&gt;&gt;&gt;[<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</div></pre></td></tr></table></figure><h4 id="zip-函数"><a href="#zip-函数" class="headerlink" title="zip( ) 函数"></a>zip( ) 函数</h4><p><code>zip()</code> 函数用于将可迭代的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的对象，这样做的好处是节约了不少的内存。<br><code>return min((b-a) for a, b in zip(m, m[1:]))</code></p><h4 id="divmod-函数"><a href="#divmod-函数" class="headerlink" title="divmod( )函数"></a>divmod( )函数</h4><p>python divmod() 函数把除数和余数运算结果结合起来，返回一个包含商和余数的元组(a // b, a % b)。</p><h4 id="join-函数"><a href="#join-函数" class="headerlink" title="join( ) 函数"></a>join( ) 函数</h4><p><code>‘s’.join(str)</code><br>s: 分隔符，可以为空<br>str：要连接的元素序列、字符串、元组、字典<br>上面的语法即：以sep作为分隔符，将seq所有的元素合并成一个新的字符串</p><p>返回值：返回一个以分隔符sep连接各个元素后生成的字符串</p><h4 id="contains"><a href="#contains" class="headerlink" title="__contains__"></a>__contains__</h4><p>在类中定义，在外面当用到 for i in class 时，<code>in</code> 调用该函数<br><code>in = contains()</code><br><code>x.__contain__(y)&lt;==&gt; y in x</code></p><h2 id="import"><a href="#import" class="headerlink" title="import"></a>import</h2><h4 id="collections-Counter"><a href="#collections-Counter" class="headerlink" title="collections.Counter"></a>collections.Counter</h4><p>Counter类的目的是用来跟踪值出现的次数。它是一个无序的容器类型，以字典的键值对形式存储，其中元素作为key，其计数作为value。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>c = Counter()  <span class="comment"># 创建一个空的Counter类</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c = Counter(<span class="string">'gallahad'</span>)  <span class="comment"># 从一个可iterable对象（list、tuple、dict、字符串等）创建</span></div></pre></td></tr></table></figure><h4 id="collections-deque"><a href="#collections-deque" class="headerlink" title="collections.deque"></a>collections.deque</h4><p>deque 是双边队列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">d = collections.deque([])</div><div class="line">d.append(<span class="string">'a'</span>) <span class="comment"># 在最右边添加一个元素，此时 d=deque('a')</span></div><div class="line">d.appendleft(<span class="string">'b'</span>) <span class="comment"># 在最左边添加一个元素，此时 d=deque(['b', 'a'])</span></div><div class="line">d.extend([<span class="string">'c'</span>,<span class="string">'d'</span>]) <span class="comment"># 在最右边添加所有元素，此时 d=deque(['b', 'a', 'c', 'd'])</span></div><div class="line">d.extendleft([<span class="string">'e'</span>,<span class="string">'f'</span>]) <span class="comment"># 在最左边添加所有元素，此时 d=deque(['f', 'e', 'b', 'a', 'c', 'd'])</span></div><div class="line">d.pop() <span class="comment"># 将最右边的元素取出，返回 'd'，此时 d=deque(['f', 'e', 'b', 'a', 'c'])</span></div><div class="line">d.popleft() <span class="comment"># 将最左边的元素取出，返回 'f'，此时 d=deque(['e', 'b', 'a', 'c'])</span></div><div class="line">d.rotate(<span class="number">-2</span>) <span class="comment"># 向左旋转两个位置（正数则向右旋转），此时 d=deque(['a', 'c', 'e', 'b'])</span></div><div class="line">d.count(<span class="string">'a'</span>) <span class="comment"># 队列中'a'的个数，返回 1</span></div><div class="line">d.remove(<span class="string">'c'</span>) <span class="comment"># 从队列中将'c'删除，此时 d=deque(['a', 'e', 'b'])</span></div><div class="line">d.reverse() <span class="comment"># 将队列倒序，此时 d=deque(['b', 'e', 'a'])</span></div></pre></td></tr></table></figure><h4 id="collections-defaultdict"><a href="#collections-defaultdict" class="headerlink" title="collections.defaultdict( )"></a>collections.defaultdict( )</h4><p>免去查看字典里是否有 key 的操作，如果没有直接加上</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 普通 dictionary</span></div><div class="line">graph=&#123;&#125;</div><div class="line"><span class="keyword">for</span> u, v, w <span class="keyword">in</span> times:</div><div class="line">    <span class="keyword">if</span> u <span class="keyword">not</span> <span class="keyword">in</span> graph:</div><div class="line">        graph[u]=[(v, w)]</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        graph[u].append((v, w))</div><div class="line"></div><div class="line"><span class="comment"># 骚操作</span></div><div class="line">graph=collections.defaultdict(list)</div><div class="line"><span class="keyword">for</span> u, v, w <span class="keyword">in</span> times:</div><div class="line">    graph[u].append((v,w))</div></pre></td></tr></table></figure><h4 id="heapq"><a href="#heapq" class="headerlink" title="heapq"></a>heapq</h4><p>最小堆（优先队列）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>l=[<span class="number">4</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">1</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>heapq.heapify(l)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>l</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">4</span>]</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>h=[]                    <span class="comment">#定义一个list</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> heapq    <span class="comment">#引入heapq模块</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>h</div><div class="line">[]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>heappush(h,<span class="number">5</span>)               <span class="comment">#向堆中依次增加数值</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>heappush(h,<span class="number">2</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>heappush(h,<span class="number">3</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>heappush(h,<span class="number">9</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>h                           <span class="comment">#h的值</span></div><div class="line">[<span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">9</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>heappop(h)                  <span class="comment">#从h中删除最小的，并返回该值</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>h</div><div class="line">[<span class="number">3</span>, <span class="number">5</span>, <span class="number">9</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>h.append(<span class="number">1</span>)                 <span class="comment">#注意，如果不是压入堆中，而是通过append追加一个数值</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>h                           <span class="comment">#堆的函数并不能操作这个增加的数值，或者说它堆对来讲是不存在的</span></div><div class="line">[<span class="number">3</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">1</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>heappop(h)                  <span class="comment">#从h中能够找到的最小值是3,而不是1</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>heappush(h,<span class="number">2</span>)               <span class="comment">#这时，不仅将2压入到堆内，而且1也进入了堆。</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>h</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">5</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>heappop(h)                  <span class="comment">#操作对象已经包含了1</span></div><div class="line"><span class="number">1</span></div></pre></td></tr></table></figure></p><h2 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h2><h4 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h4><p> <code>f=abs</code> 函数本身可以赋值给变量，即变量可以指向函数。<br>既然变量可以指向函数，函数的参数能接受变量，那么一个函数就可以接受另一个函数作为参数，这种函数就称之为高级函数</p><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><p><code>map()</code> 函数接受两个参数，一个是函数，一个是<code>Iterable</code>，<code>map</code>将传入的函数依次作用到序列的每个元素，，并把结果作为新的<code>Iterator</code>返回。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">return</span> x * x</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>r = map(f, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(r)</div><div class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(map(str, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]))</div><div class="line">[<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>]</div></pre></td></tr></table></figure><blockquote><p>感觉这个跟 <code>filter( ）</code> 有点像啊，<code>filter( )</code>接受一个是函数，一个是 list，返回一个迭代器，将返回 True 的放进去。</p></blockquote><h4 id="reduce-函数"><a href="#reduce-函数" class="headerlink" title="reduce 函数"></a>reduce 函数</h4><p><code>reduce( )</code>把一个函数作用在一个序列上，这个函数必须接受两个参数，<code>reduce</code>吧结果继续和序列的下一个函数做累积计算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">reduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">return</span> x + y</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>reduce(add, [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>])</div><div class="line"><span class="number">25</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">(x, y)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">return</span> x * <span class="number">10</span> + y</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>reduce(fn, [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>])</div><div class="line"><span class="number">13579</span></div></pre></td></tr></table></figure><h4 id="sorted-函数"><a href="#sorted-函数" class="headerlink" title="sorted( ) 函数"></a>sorted( ) 函数</h4><p>他可以接受一个<code>key</code>函数来实现自定义排序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>sorted([<span class="number">36</span>, <span class="number">5</span>, <span class="number">-12</span>, <span class="number">9</span>, <span class="number">-21</span>], key=abs)</div><div class="line">[<span class="number">5</span>, <span class="number">9</span>, <span class="number">-12</span>, <span class="number">-21</span>, <span class="number">36</span>]</div></pre></td></tr></table></figure><p>还可反向排序，传入第三个参数： <code>reverse=True</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>sorted([<span class="string">'bob'</span>, <span class="string">'about'</span>, <span class="string">'Zoo'</span>, <span class="string">'Credit'</span>], key=str.lower, reverse=<span class="keyword">True</span>)</div><div class="line">[<span class="string">'Zoo'</span>, <span class="string">'Credit'</span>, <span class="string">'bob'</span>, <span class="string">'about'</span>]</div></pre></td></tr></table></figure><h2 id="匿名函数-lambda-x-x-x"><a href="#匿名函数-lambda-x-x-x" class="headerlink" title="匿名函数 lambda x: x+x"></a>匿名函数 lambda x: x+x</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;位操作符&quot;&gt;&lt;a href=&quot;#位操作符&quot; class=&quot;headerlink&quot; title=&quot;位操作符&quot;&gt;&lt;/a&gt;位操作符&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/Screen Shot 2018-11-12 at 
      
    
    </summary>
    
      <category term="记录" scheme="http://zhstark.com/categories/%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="tech" scheme="http://zhstark.com/tags/tech/"/>
    
  </entry>
  
  <entry>
    <title>python学习笔记1</title>
    <link href="http://zhstark.com/2019/02/08/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/"/>
    <id>http://zhstark.com/2019/02/08/python学习笔记1/</id>
    <published>2019-02-08T21:31:21.000Z</published>
    <updated>2019-02-16T21:41:09.241Z</updated>
    
    <content type="html"><![CDATA[<p>如果要让 Python 打印出指定的文字，可以用print( )，把打印的文字用单引号或双引号括起来。<br>input( )函数输入，input 返回的数据类型是 str<br>#  开头的是注释</p><a id="more"></a><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul><li>整数</li><li>浮点数</li><li>正负无穷<br>  <code>float(&quot;inf&quot;) and float(&quot;-inf&quot;)</code></li><li><p>字符串<br>  字符串是以单引号<em>‘</em>或双引号<em>“</em>括起来的文本。<br>  还可以用<code>r&#39; &#39;</code>表示<code>&#39; &#39;</code>内部不转义。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print(r&apos;\\\t\\\&apos;)\\\t\\\```</div></pre></td></tr></table></figure></li><li><p>[] list；( ) tuple；<br>  <em>方法：append( ), pop( ), insert( a, b)</em>  </p></li><li><p>{ }dictionary<br> <code>dic[’a’]=b</code> <code>dic.pop(&#39;a&#39;)</code></p></li><li>set: key 的集合  但不存储value。<br>  创建一个 set 需要提供一个 list 作为输入集合。<br>  方法：add(key), remove(key),<br>  set 可以看成数学意义上的无序和无重复元素的集合</li><li>list 方法<br>  <code>l.count(1)</code> 值为1的有几个<br>  <code>b=a[:]</code> make a copy!<br>  <img src="/images/Image 2018-11-4 下午3-37.jpeg" alt=""></li><li>string 方法<br><img src="/images/Image 2018-11-4 下午3-39.jpeg" alt=""></li><li>set 方法<br><img src="/images/test1.jpeg" alt="test3"></li><li>dictionary 方法<br>  <code>dic.pop(key)</code><br>  <img src="/images/Image 2018-11-4 下午3-42.jpeg" alt=""></li></ul><h2 id="大小写"><a href="#大小写" class="headerlink" title="大小写"></a>大小写</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">str=<span class="string">"www.zhstark.com"</span></div><div class="line">print(str.upper() )<span class="comment"># 把所有字符中的小写字母转换成大写字母</span></div><div class="line">print(str.lower() ) <span class="comment"># 把所有字符中的大写字母转换成小写字母</span></div><div class="line">print(str.capitalize() )  <span class="comment"># 把第一个字母转化为大写字母，其余小写</span></div><div class="line">print(str.title() ) <span class="comment"># 把每个单词的第一个字母转化为大写，其余小写</span></div><div class="line"></div><div class="line">WWW.RUNOOB.COM</div><div class="line">www.runoob.com</div><div class="line">Www.runoob.com</div><div class="line">Www.Runoob.Com</div></pre></td></tr></table></figure><h2 id="判断是否是数字或字母"><a href="#判断是否是数字或字母" class="headerlink" title="判断是否是数字或字母"></a>判断是否是数字或字母</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">str 是字符串</div><div class="line">str.isalnum() <span class="comment">#所有字符都是数字或者字母</span></div><div class="line">str.isalpha() <span class="comment">#所有字符都字母</span></div><div class="line">str.isdigit() <span class="comment">#所有字符都是数字</span></div><div class="line">str.islower() <span class="comment">#所有字符都是小写</span></div><div class="line">str.isupper()</div><div class="line">str.istitle() <span class="comment">#所有单词都是首字母大写</span></div><div class="line">str.isspace() <span class="comment">#所有字符都是空白字符、\t、\n、\r</span></div></pre></td></tr></table></figure><h2 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; 'hello, %s' % 'world</div><div class="line">'hello, world'</div><div class="line">&gt;&gt;&gt; 'Hi, %s, you have $%d.' % ('Micheal', 99999)</div><div class="line"></div><div class="line">%d   整数</div><div class="line">%f 浮点数</div><div class="line">%s 字符串</div><div class="line">%x 十六进制整数</div></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>定义一个函数要使用的饭语句，依次写出函数名，括号，参数和冒号：</p><p>定义一个什么也不做的空函数，可以用 pass 语句：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">nop</span><span class="params">()</span>:</span></div><div class="line"><span class="keyword">pass</span></div></pre></td></tr></table></figure></p><p>pass可以用来做占位符</p><ul><li>位置参数<br>  <code>def power(x):</code></li><li>默认参数<br>  <code>def power(x, n=2):</code></li><li>可变参数<br>  <code>def calc(*number):</code><br>  参数 number 接收到的是一个 tuple</li><li>关键字参数<br>  <code>def person(name, age, **kw):</code></li><li>命名关键字参数<br>  <code>def person(name, age, *, city, job):</code><br>  <code>def person(name, age, *args, city, job):</code><br>  命名关键字参数必须传入参数名。</li></ul><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><h4 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">L[<span class="number">0</span>:<span class="number">3</span>]</div><div class="line">L[:<span class="number">3</span>]</div><div class="line">L[<span class="number">-2</span>:]</div></pre></td></tr></table></figure><h4 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h4><p>我们可以通过 for 循环来遍历一个 list或 tuple，这种遍历我们称为迭代 ( Iteration )<br>内置的 enumerate 函数可以把一个 list 变成索引-元素对  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i, value <span class="keyword">in</span> enumerate([<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,]):</div><div class="line">print(i, value)</div></pre></td></tr></table></figure><h4 id="列表生成器"><a href="#列表生成器" class="headerlink" title="列表生成器"></a>列表生成器</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[k*k <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>)]</div></pre></td></tr></table></figure><h4 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h4><p>一边循环一边计算的机制，称为生成器：generator。<br>可以通过<code>next()</code>函数获得 generator 的下一个返回值。</p><ul><li><p>第一种方法，把列表生成式的[] 改成()，就创建了一个 generator<br>  <code>g=(x*x for x in range(10)）</code>  </p></li><li><p>第二种方法，如果一个函数定义中包含<em>yield</em>关键字，那么这个函数就不再是普通函数，而是一个 generator。  </p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(max)</span>:</span>  </div><div class="line">n,a,b=<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>  </div><div class="line"><span class="keyword">while</span> n&lt;max:  </div><div class="line"><span class="keyword">yield</span> b  </div><div class="line">a,b=b, a+b  </div><div class="line">n=n+<span class="number">1</span>  </div><div class="line"><span class="keyword">return</span> <span class="string">'done'</span></div></pre></td></tr></table></figure></li></ul><h4 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h4><p>可以被 next()  函数调用并不断返回下一个值得对象成为迭代器： Iterator。<br>把 list, dict, str 等 Iterable 变成 Iterator 可以使用 iter() 函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(iter(<span class="string">'abc'</span>), Iterator）</div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果要让 Python 打印出指定的文字，可以用print( )，把打印的文字用单引号或双引号括起来。&lt;br&gt;input( )函数输入，input 返回的数据类型是 str&lt;br&gt;#  开头的是注释&lt;/p&gt;
    
    </summary>
    
      <category term="记录" scheme="http://zhstark.com/categories/%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="tech" scheme="http://zhstark.com/tags/tech/"/>
    
  </entry>
  
  <entry>
    <title>七牛图床链接失效</title>
    <link href="http://zhstark.com/2018/12/19/%E4%B8%83%E7%89%9B%E5%9B%BE%E5%BA%8A%E9%93%BE%E6%8E%A5%E5%A4%B1%E6%95%88/"/>
    <id>http://zhstark.com/2018/12/19/七牛图床链接失效/</id>
    <published>2018-12-19T05:14:05.000Z</published>
    <updated>2018-12-19T05:39:51.817Z</updated>
    
    <content type="html"><![CDATA[<p>突然发现以前博客的图片都没有了，查了一下是因为七牛的连接更改问题（我之前用的都是七牛的图床）。</p><a id="more"></a><p>找了个弥补方法的<a href="https://blog.csdn.net/lkj345/article/details/83382636" target="_blank" rel="external">链接</a>。懒得吧图片折腾回来了，反正也没人看=。=</p><p>在七牛新建一个存储空间还能继续用，希望七牛不要出这种幺蛾子了吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;突然发现以前博客的图片都没有了，查了一下是因为七牛的连接更改问题（我之前用的都是七牛的图床）。&lt;/p&gt;
    
    </summary>
    
      <category term="记录" scheme="http://zhstark.com/categories/%E8%AE%B0%E5%BD%95/"/>
    
    
  </entry>
  
  <entry>
    <title>git push 重新输入密码</title>
    <link href="http://zhstark.com/2018/12/16/git%20push%20%E9%87%8D%E6%96%B0%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81/"/>
    <id>http://zhstark.com/2018/12/16/git push 重新输入密码/</id>
    <published>2018-12-17T04:42:01.000Z</published>
    <updated>2019-02-08T21:31:56.062Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第一种情况"><a href="#第一种情况" class="headerlink" title="第一种情况"></a>第一种情况</h3><p>通过 <code>https://</code> clone 下来的，输入：<code>git config --global credential.helper store</code></p><p>网上普遍推这种方案，但我没试过</p><p>这种方案的缺点在于账户密码完全明文存储在本地，不安全。</p><h3 id="第二种情况"><a href="#第二种情况" class="headerlink" title="第二种情况"></a>第二种情况</h3><p>通过<code>SSH</code> clone 下来的，但每次 git push 仍要输入密码。<br><a id="more"></a></p><p>首先检查根目录下有没有 <code>.ssh</code> 文件</p><ul><li><p>如果有，运行</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-add -K ~/.ssh/id_rsa</div></pre></td></tr></table></figure></li><li><p>没有，</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C "email@mail.com"</div><div class="line"></div><div class="line">git config --global user.name "name"</div><div class="line"></div><div class="line">git config --global user.email "email@mail.com"</div><div class="line"></div><div class="line">#测试</div><div class="line">ssh -T git@github.com</div></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;第一种情况&quot;&gt;&lt;a href=&quot;#第一种情况&quot; class=&quot;headerlink&quot; title=&quot;第一种情况&quot;&gt;&lt;/a&gt;第一种情况&lt;/h3&gt;&lt;p&gt;通过 &lt;code&gt;https://&lt;/code&gt; clone 下来的，输入：&lt;code&gt;git config --global credential.helper store&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;网上普遍推这种方案，但我没试过&lt;/p&gt;
&lt;p&gt;这种方案的缺点在于账户密码完全明文存储在本地，不安全。&lt;/p&gt;
&lt;h3 id=&quot;第二种情况&quot;&gt;&lt;a href=&quot;#第二种情况&quot; class=&quot;headerlink&quot; title=&quot;第二种情况&quot;&gt;&lt;/a&gt;第二种情况&lt;/h3&gt;&lt;p&gt;通过&lt;code&gt;SSH&lt;/code&gt; clone 下来的，但每次 git push 仍要输入密码。&lt;br&gt;
    
    </summary>
    
      <category term="记录" scheme="http://zhstark.com/categories/%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="tech" scheme="http://zhstark.com/tags/tech/"/>
    
  </entry>
  
  <entry>
    <title>添加路径到 PATH 的问题</title>
    <link href="http://zhstark.com/2018/10/17/%E6%B7%BB%E5%8A%A0%E8%B7%AF%E5%BE%84%E5%88%B0%20PATH%20%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://zhstark.com/2018/10/17/添加路径到 PATH 的问题/</id>
    <published>2018-10-18T03:08:27.000Z</published>
    <updated>2019-02-08T21:32:33.096Z</updated>
    
    <content type="html"><![CDATA[<p>该文章是记录我在捣鼓 pandoc 的时候出现 bug 并解决的过程。</p><a id="more"></a><p>由于我平时喜欢用 markdown 写作，如何编辑数学公式就成了难题。通过 pandoc，我可以在 markdown 里用 LaTeXiT 编辑公式，通过 pandoc 就可以导出显示公式的 pdf 了。但在我导出的时候，会有提示<code>pdflatex not found. pdflatex is needed for pdf output.</code>。我之前已经下载过 MacTex，所以<code>pdflatex</code>这东西我是一定安装好了，通过搜索，发现应该是路径没有导入 PATH 的问题。但是网上的教程对我来说并不管用，通过一系列折腾，终于搞清楚了问题所在。</p><p>当我们安装了新的底层程序（如 MacTex，npm），需要将其路径放到 PATH 中，在很多网络教程中，都是使用的该语句：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo nano /etc/paths</div></pre></td></tr></table></figure><p>将路径输入进文件，或者是：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> 'export <span class="built_in">PATH</span>="/usr/local/bin:$<span class="built_in">PATH</span>"' &gt;&gt; ~/.bash_profile</div></pre></td></tr></table></figure><p>然后用<code>echo $PATH</code> 查看，在某些情况下，该PATH 变量并没有任何改变，打开<code>/etc/paths</code> 文件，看到路径确实添加进去了。这是怎么回事呢？</p><p>这时候<code>echo $PATH</code> 所显示的路径其实属于 <code>bash_profile</code>，我们用文本编辑器打开该文件，看到里面有<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export <span class="built_in">PATH</span>="/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin"</div></pre></td></tr></table></figure></p><p>我们只需要将所要添加的路径续在<code>&quot; &quot;</code> 后面就可以了，记得用<code>:</code>与前面的路径分开。<br>eg：<br><code>export PATH=&quot;/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/Library/Tex/texbin&quot;</code><br>然后重启终端，再用<code>echo $PATH</code>，就发现已显示添加的路径。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;该文章是记录我在捣鼓 pandoc 的时候出现 bug 并解决的过程。&lt;/p&gt;
    
    </summary>
    
      <category term="记录" scheme="http://zhstark.com/categories/%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="tech" scheme="http://zhstark.com/tags/tech/"/>
    
  </entry>
  
  <entry>
    <title>中科院科研项目总结</title>
    <link href="http://zhstark.com/2016/10/08/%E4%B8%AD%E7%A7%91%E9%99%A2%E7%A7%91%E7%A0%94%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    <id>http://zhstark.com/2016/10/08/中科院科研项目总结/</id>
    <published>2016-10-08T18:54:04.000Z</published>
    <updated>2016-10-08T06:54:40.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>前三部分为扯淡，第四部分描述了这个课题的过程步骤，第五部分为一些小感悟，第六部分是小福利。</em></p><hr><a id="more"></a><p><em>先扯扯淡</em></p><h2 id="一"><a href="#一" class="headerlink" title="一"></a>一</h2><p>为期五天的科研营结束了，有收获，也有遗憾。</p><p>这五天确确实实学到了很多东西，不论是概念上的，还是方法、工具使用上的。终于大致理解了机器学习有哪些方法，基于的原理，并切实应用了 SVM 分类器。大二调了一年参数，本以为会了机器学习就可以让电脑自己搞出成果来，结果还是要自己再去调参数，真是蛋疼。</p><p>基于各种原因，最终我们并没有切实的完成这个课题，目前只是从一幅图片里提取出了车牌的区域，还不能让电脑认识车牌上的字符，写入文本。日后要补完，最好再整理重构一下。（一不小心就立了 flag = =）</p><p>短短五天，除了第一天，每天都是凌晨一点多才能睡。第二天9点上课，中午没有午休，却从没有像在学校一样听着课不小心就睡着。也许是老师讲课水平高，也许是这些知识确确实实吸引了我，激起了我的兴趣，总之，在这种强度下没有出现过上课睡着的情况甚至连打瞌睡都没有，对我来说，史无前例。</p><h2 id="二"><a href="#二" class="headerlink" title="二"></a>二</h2><p>最后一天，走前在计算所里面简单逛了逛，发现其一楼布置的还是很赞的。内部有买咖啡的地方，应该是因为在假期吧，里面无人营业。</p><p><img src="http://obt165s4s.bkt.clouddn.com/IMG_1859.jpg" alt="IMG_1859"></p><p>咖啡店外面，提供了好长一排可以读书讨论的地方，沙发座椅，环境布置的很不错。</p><p><img src="http://obt165s4s.bkt.clouddn.com/IMG_1568.jpg" alt="IMG_1568"></p><p>我认为一个公司（/机构）里的厕所设置可以在很大程度上代表该公司（/机构）的硬件水平。不得不说计算所的厕所设置的还是很人性化的，至少在我所见过的建筑中，计算所的最贴心。内部采取的是人体红外感应，水龙头的距离感应特别靠谱，不像其他地方的要晃半天手才感应到。每个厕间都有放东西的小托盘，有厕纸。暖暖的，很贴心。</p><p>好久之后才发现，原来大名鼎鼎的搜狐就在旁边<br><img src="http://obt165s4s.bkt.clouddn.com/IMG_4511.jpg" alt="IMG_4511"></p><h2 id="三"><a href="#三" class="headerlink" title="三"></a>三</h2><p>这次做东西最开心的莫过于终于不用 TMD 开虚拟机用 Windows了！不知要剩多少心，感觉自己又能多活五分钟。以后选专业就要选这种能全程使用 Mac，不像搞单片机那样离开 Windows 就 gg，Mac 给我的美感，舒适能让我坚持更长时间的工作( ⸝⸝⸝⁼̴́⌄⁼̴̀⸝⸝⸝)。工具嘛，必须用顺手的才有效率。</p><p>可惜的是没有带转接头，无法用自己电脑，展示PPT的时候只能讲Keynote 转为 pdf格式了。</p><h2 id="四"><a href="#四" class="headerlink" title="四"></a>四</h2><blockquote><p>以上都是扯淡<br>以下来稍微专业点的干货<br>有时候我会提出一些简单的问题，有兴趣的读者可以思考一下</p></blockquote><p>认识个车牌看似简单，但是要把这个检测识别做的足够强大，有更强的普适性，还是有很多工作要做的。单是对鱼眼镜头图像的校正处理就能发硕士毕业论文了。目前做的没那么复杂，只是对正视视角的车牌处理。但还是会分割为好多问题。</p><p>得到一幅图像，我们要通过一定的方法找到可能是车牌的区域，即选择符合一定规则的框框，作为车牌的“候选人”，下一步，便是在这些“候选人”中选择最合适的人选，即找出真正的带车牌的框框。该人选可能没有那么了解当前的业务，所以，下一步便是对选好的人选进行培训，即对所选的车牌区进行进一步优化处理，以便进一步识别出上面的字。最后，就是把一个字一个字都扣下来，进行模板匹配，从而将车牌上的字从“图像”的印象转为“字符”的印象。这是目前所差的步骤了，当然，在完成的过程中肯定还会遇到各种各样的问题，已经习惯麻木了<code>_(:3」∠)_</code></p><h3 id="4-1"><a href="#4-1" class="headerlink" title="4.1"></a>4.1</h3><p>读取图像就是从文件里找，当时老师要求做一个简单的 GUI 界面，我一脸懵逼的就去学做 GUI了，结果其实只需要一个内带的函数就可以自动跳出 GUI 界面让你选择文件。</p><h3 id="4-2"><a href="#4-2" class="headerlink" title="4.2"></a>4.2</h3><p>可能是车牌的区域怎么找嘞？方法很多，我们目前用了两种，第一种是通过颜色提取，因为车牌是蓝色的嘛（暂时只考虑蓝色车牌），那么只需要把蓝色的区域提取出来就是嫌疑牌喽。怎么提取呢？一张彩图是通过几个通道的数据合成出来的。比如 RGB 的图片格式，就是通过 R(red)<br>, G(green), B(blue)三个代表三种颜色的通道合成出来的。如果是 RGB 的图片格式的话，我们就可以选择 R G 通道数字小，B 通道在一定范围的区域作为嫌疑牌。不过目前我使用的是 Lab格式，测试过 hsv格式，效果不好。没有测试 RGB格式。找到嫌疑牌后，我们就把这张图片二值化，即把嫌疑牌说占的区域全部变成白色，其他变成黑色。（为什么要二值化呢？）</p><p><img src="http://obt165s4s.bkt.clouddn.com/proposal.png" alt="proposa"></p><p>第二种就是通过轮廓提取，对于一张灰度图来说，色差明显的地方我们可以视为边缘。这一步便是先利用 RGB 变灰度的经验公式对彩图进行灰度化，然后通过一定的算法对该灰度图提取边缘。（为什么不直接对彩图提取边缘呢？）提取后，凡是边缘的地方就是白色，不是边缘的就是黑色。因为车牌是白边蓝底白字，所以这种方法把车牌选中的难度不大。</p><p><img src="http://obt165s4s.bkt.clouddn.com/提取轮廓.png" alt="提取轮廓"></p><h3 id="4-3"><a href="#4-3" class="headerlink" title="4.3"></a>4.3</h3><p>现在我们得到了一张只有黑白两种颜色的图片，那，来回答为什么对通过颜色提取的图片进行二值化的问题。是为了和轮廓提取法相统一吗？通过轮廓提取就是二值化后的了。并非如此。二值化是为了方便我们的这一步处理。</p><p>因为只有黑白两种颜色，所以处理起来自然简单的多。所以这也是我们化简问题的一种方法。</p><p>对于得到的黑白图像，我们再对其做“腐蚀”或“膨胀”或既有“腐蚀”又有“膨胀”的处理（图像处理上的专业术语，放张图片感受下）。相当如对图片的一步润色。</p><p><img src="http://obt165s4s.bkt.clouddn.com/膨胀.jpg" alt="膨胀"></p><p><img src="http://obt165s4s.bkt.clouddn.com/腐蚀.jpg" alt="腐蚀"></p><p>不管是是通过轮廓还是颜色，对选的嫌疑牌的大小，形状都没有限定。所以有可能有很多小的零散的点，类似于噪声，总之那些一定是对我们没用的东西，所以我们再把那些特别小的点除去，这样，我们就得到了质量更高的嫌疑牌。（<em>类比于海选第二阶段，在淘汰掉一群倒霉孩子</em>）</p><h3 id="4-4"><a href="#4-4" class="headerlink" title="4.4"></a>4.4</h3><p>海选结束，我们得到了少数几个很有可能是车牌的区域，当然，我们需要的是他们的坐标信息。从而在原图像中把这些区域扣出来。</p><p>下一步，就是把真正的车牌选出来，这一步也是这个课题最有趣的部分。它需要用到机器学习的方法，让机器学着认识车牌。</p><p>机器毕竟不是人，它算的再快也没用像人类一样的抽象思维，它只能处理数字信息。那么如何让电脑认识车牌就是一个大问题。</p><p>既然电脑认识数字信息，那么我们就从图片上提取出数字信息呗。这项课题中我们便是提取图片的 HOG（histogram of gradient）特征。记住了一个图像的 HOG特征之后，那电脑就认识这幅图像了。</p><p>但是，你认识了这副图，下一幅类似的不认识了也不行啊，不能只认识黑体的“1”转为斜体“<em>1</em>”就一脸懵逼呀。</p><p>这时候，就要用到强大的 SVM分类器了。这一块之前的文章有过介绍，有兴趣的也可以网上查找资料，不再赘述罢。一句话：「把”是车牌”的 HOG特征和”不是车牌”的 HOG特征输入电脑，电脑以后就知道”啥样的是车牌，啥样的不是车牌”了。」</p><p>这样一来，我们把之前选好的嫌疑牌送给电脑，电脑就认得这些嫌疑牌中的真车牌了。</p><h3 id="4-5"><a href="#4-5" class="headerlink" title="4.5"></a>4.5</h3><p>这时候我们得到了的带车牌的区域，而我们最终的目的是要识别出上面的字。所以我们还有对这块区域进行进一步处理，方便我们更容易认识上面的字。</p><p>如果这时候的车牌是有小倾角的，我们对其进行 radon变换，将其摆正。然后再对其进行削边，凡是不包括字符的区域全部丢掉，丢掉！</p><p><img src="http://obt165s4s.bkt.clouddn.com/提取车牌信息.jpg" alt="提取车牌信息"></p><p>终于，我们得到了包含字符的最小区域。也是我目前做到的阶段。再下一步，就是认出上面的字了。</p><h3 id="4-6"><a href="#4-6" class="headerlink" title="4.6"></a>4.6</h3><p>电脑不够机灵，多个字放一起它认不得，得把单个的字分离出来，然后对每个字进行模板匹配，从而达到认识字的目的。这一部分等我完成再写，没有实际操作，纸上谈兵不靠谱。</p><h2 id="五"><a href="#五" class="headerlink" title="五"></a>五</h2><p>做这个项目有哪些感悟呢？</p><p>第一个是「维度」的概念，在 SVM 分类器中，对一个较复杂的情形做线性分割的方法便是「升维」。升到更高的维度后观察，非线性关系就转变为了线性关系，很多问题就可以轻易地解决了。就像我们身处三维空间就能很容易的解决二维平面的问题，而对三维空间中的物体处理起来却有时候力不从心，对四维空间中的东西……等等，什么四维空间？</p><p>第二个是「换位思考」，「换位思考」不仅仅是指与人换位，还可以与机器换位。在这个项目便是试着按照计算机的处理特点去思考。计算机没有感性思维，他只能处理数字信息，那如何才能让计算机像人类一样呢？我们就试着把我们说看到的东西转换为数字信息，一张张图片不就是一个个二维或三维的数组嘛，我们看到的什么颜色又对应数组中怎样的数值？试着从计算机的视角去看待事物，找到计算机与人相连接的桥梁，我们就知道如何让计算机像人一样看待事物了。</p><p>第三个是「搜索引擎是亲爹」。这个项目没有规定教材，不会的知识全靠网上搜，Google 百度用起来。我们处于「学习」阶段，不同于「研究」，我们遇到的问题之前都有还多人遇到过，我们走的路之前很多人也走过，所以，在这个阶段，互联网上有大量的资源可以帮助我们解决问题，搜一下就能找到，方便快捷。所以，<strong>检索能力很重要</strong>。</p><p><img src="http://obt165s4s.bkt.clouddn.com/Google first.jpg" alt="Google first"></p><p>第四，「数学就是亲爷爷」。</p><h2 id="六"><a href="#六" class="headerlink" title="六"></a>六</h2><p>这个项目我一定会完成，但是时间不好说，两周一个月都有可能。如果你对此有兴趣，可以回复“「车牌识别」+（你的邮箱）”，当我完成的时候会把全部代码上传到 github，并发邮件通知你 :）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;前三部分为扯淡，第四部分描述了这个课题的过程步骤，第五部分为一些小感悟，第六部分是小福利。&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Proactive" scheme="http://zhstark.com/categories/Proactive/"/>
    
    
  </entry>
  
  <entry>
    <title>中科院科研项目第三天</title>
    <link href="http://zhstark.com/2016/10/03/%E4%B8%AD%E7%A7%91%E9%99%A2%E7%A7%91%E7%A0%94%E9%A1%B9%E7%9B%AE%E7%AC%AC%E4%B8%89%E5%A4%A9/"/>
    <id>http://zhstark.com/2016/10/03/中科院科研项目第三天/</id>
    <published>2016-10-03T17:53:21.000Z</published>
    <updated>2016-10-21T12:29:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一"><a href="#一" class="headerlink" title="一"></a>一</h2><p>今天晚上终于找到一家合适的咖啡店上自习，有网，安静。中科院不提供自习处，十一假期好多店又关门，每天晚上我们都是无家可归的状态，到处找地方蹭网做作业。而且，这家店老板的闺女挺漂亮哒，态度好，声音也好听，嘤嘤嘤。</p><a id="more"></a><p>项目一共五天，今天已经是第三天了，还有两天结束，周围开门的饭店已经被我吃遍了。。。。感觉每逢短期假期就是我遭罪的时候，不回家，然而在外面各个服务业又停业，没地方吃，没地方去，只有床才是最温暖的陪伴。</p><h2 id="二"><a href="#二" class="headerlink" title="二"></a>二</h2><p>今天的作业是利用 HOG 提取体特征，将训练集送入 SVM 分类器让其学习，产生一个模型，再利用学习后的模型对我们需要分类的样本进行分类。</p><p>HOG 我还没太仔细看，解释不清楚，至于 SVM，可以看我上一篇文章最后的 gif 录屏，不要嫌那个动的太快，腾讯只让发2M 以下的 gif，我也没办法。其实只要我们上下摆头的速率和那张动图变化的速率一样，就能看清了。不难，我试了7次就合上拍了，还挺清晰的。</p><p>就我们目前做的课题来说，就是送一堆车牌的图片给电脑，并告诉他「看清楚了，这是车牌！」再送给他一坨不是车牌，但他可能以为是车牌的图片，告诉他「长点即兴，要是认错了发你跪键盘！」然后电脑就赶紧认认真真地去学习车牌长什么样子，不长什么样子。</p><p>等他学会后，吸收，消化，排泄，拉出一个模型便便💩，不屑地告诉我「我这便便能认识车牌了，你把这便便扣在有车牌的图片上，它把车牌给你熏下来。」</p><p>我如珍似宝地双手托着这宝贵的便便，使劲扣在一张图片上，它还真把车牌给熏下来了。我熏了一张又一张，发现，这便便味道不够足嘛，有的车牌还是熏不下来，唉。回去罚他跪键盘，但是发现作为一个穷逼，我并没有键盘让他跪。所以特此征好心人送我一个 cherry 键盘来让电脑跪，感激不尽。</p><h2 id="三"><a href="#三" class="headerlink" title="三"></a>三</h2><p>其实让电脑学习还不是简单的给他资料他就能学。电脑，这个高贵的东西，肯定有点小脾气不是，所以你得对他性子才行，他喜欢吃苹果，你非得喂他吃榴莲，他肯定轻则罢学重则 down机啊，榴莲再贵也不行，不对电脑口味。</p><p>所以能，咱得找到电脑喜欢啥，给他点啥他才能更好的学习。电脑没长牙，那我就送他两个参数意思意思呗，他不告诉我他喜欢吃啥很是讨厌，我得一个个试，这电脑配置低，性格墨迹，试一次要好长时间，TMD，老子有钱了买个最高配，拿一筐苹果塞他嘴里，让他使劲吃，吃完使劲学。苹果不管用就塞梨，梨再不管用，那我只能破费请他吃个海底捞了。</p><p>目前我还没兴致找他口味，所以他现在拉出的便便质量也就那样吧，还凑活能用。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一&quot;&gt;&lt;a href=&quot;#一&quot; class=&quot;headerlink&quot; title=&quot;一&quot;&gt;&lt;/a&gt;一&lt;/h2&gt;&lt;p&gt;今天晚上终于找到一家合适的咖啡店上自习，有网，安静。中科院不提供自习处，十一假期好多店又关门，每天晚上我们都是无家可归的状态，到处找地方蹭网做作业。而且，这家店老板的闺女挺漂亮哒，态度好，声音也好听，嘤嘤嘤。&lt;/p&gt;
    
    </summary>
    
      <category term="Proactive" scheme="http://zhstark.com/categories/Proactive/"/>
    
    
  </entry>
  
  <entry>
    <title>中科院科研项目第二天</title>
    <link href="http://zhstark.com/2016/10/02/%E4%B8%AD%E7%A7%91%E9%99%A2%E7%A7%91%E7%A0%94%E9%A1%B9%E7%9B%AE%E7%AC%AC%E4%BA%8C%E5%A4%A9/"/>
    <id>http://zhstark.com/2016/10/02/中科院科研项目第二天/</id>
    <published>2016-10-03T02:39:06.000Z</published>
    <updated>2018-12-17T04:52:46.788Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>学习乃万恶之首<br>其实我也想度假</p></blockquote><a id="more"></a><h2 id="一"><a href="#一" class="headerlink" title="一"></a>一</h2><p>昨天做作业搞到凌晨一点半，所以没有及时发文。</p><p>今天作业量小些，先补写一下~</p><p>在计算所上课到下午四点半，下课就不让待着了，待着那里也没wifi。堂堂计算所 竟然不提供全楼 wifi 覆盖，真是说不过去，太掉价了。</p><p>而中科院周围跟空城似的，假期真是积极响应党和国家的号召，认认真真休假，找了两家咖啡馆都关门，现在我们下课后的情况就是到处找地方自习蹭 WiFi。</p><p>先放一下计算所的照片吧，</p><p><img src="http://obt165s4s.bkt.clouddn.com/IMG_0125.jpg" alt="IMG_0125"></p><p><img src="http://obt165s4s.bkt.clouddn.com/IMG_0126.jpg" alt="IMG_0126"></p><p><img src="http://obt165s4s.bkt.clouddn.com/IMG_0127.jpg" alt="IMG_0127"></p><p>内部布局看起来挺大气的，那些座椅在一楼大厅的一侧，在这喝杯咖啡聊聊天还是蛮有韵味的。大门有门禁，负责门禁的是个很帅气的小哥，恩，真挺帅气的。地下一层就乒乓球场地，球台挺好的，空间也够大，本来冲着这点就考虑以后到这找工作了，但是看了他的 wifi 情况还是算了。</p><h2 id="二"><a href="#二" class="headerlink" title="二"></a>二</h2><p>昨天作业算是真正开始接触机器学习了。之前都是使用 MATLAB 对图像进行处理（在此不得不感叹 MATLAB 之强大），但是处理后并不能完全把车牌区域提取出来，经过这种程度地处理电脑还很容易把非车牌区域认为车牌区域，毕竟它也不知道那到底是啥区域，只是判断其颜色，大小，就提取出来了。</p><p><img src="http://obt165s4s.bkt.clouddn.com/proposal.png" alt="proposa"></p><p>要想变得厉害还是得学习！</p><blockquote><p>机器学习是怎么来的呢？有一群心理变态的人在一起读书学习的时候看着电脑在那无聊的待着，就想：「这电脑怎么能这样呢？要么玩游戏，要么就放点 dirty movie，毒害人类！要么就在那闲着，浪费生命！这可不行，你得学习，不学习不成机器。」于是他们就发明了机器学习，这样电脑也能快乐的陪他们一起学习了。</p></blockquote><p>以上纯属扯淡</p><p>用 MATLAB 提取出几块可能是车牌的区域还是不行啊，得让电脑知道哪块才是真正的车牌区域才行。但是人们又懒得一点点教电脑怎么识别哪块才是车牌区域，所以，让电脑自己学去吧！老子才不管你，学不好就摔你！</p><p>学习得有方法，于是那些大（bian）神（tai）善性大发，打算教给电脑一些学习方法，其中一种叫 「SVM（Support Vector Machine）分类器」。</p><p>SVM 翻译过来叫支持向量机，他叫“机”，但他不是机器，它属于机器学习中的有监督学习模型。（电脑学个习还得被监督呢？谁监督你啊呸）刚来第二天就要接触高大上的机器学习模型，还得做 ppt 展示？我的表情是这样的</p><p><img src="http://obt165s4s.bkt.clouddn.com/WechatIMG2.jpeg" alt="WechatIMG2"></p><p>但该学还得学啊，电脑都要学习了，咱不能比不过电脑啊。昨天看资料到12点多，终于感觉理解的差不多了，于是简单做了个 keynote，麻溜睡觉。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;学习乃万恶之首&lt;br&gt;其实我也想度假&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Proactive" scheme="http://zhstark.com/categories/Proactive/"/>
    
    
  </entry>
  
  <entry>
    <title>中科院科研项目第一天</title>
    <link href="http://zhstark.com/2016/10/01/%E4%B8%AD%E7%A7%91%E9%99%A2%E7%A7%91%E7%A0%94%E9%A1%B9%E7%9B%AE%E7%AC%AC%E4%B8%80%E5%A4%A9/"/>
    <id>http://zhstark.com/2016/10/01/中科院科研项目第一天/</id>
    <published>2016-10-02T02:46:46.000Z</published>
    <updated>2016-10-05T09:07:52.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>趁着他们都去度假了，看看我们这几天能够做成什么</p></blockquote><h2 id="零"><a href="#零" class="headerlink" title="零"></a>零</h2><p>昨天从济南千里迢迢终于来到了北京，感谢梦瑶大头曹同学不远万里去车站接我，虽然等了好久= =！</p><p>实习地点在中科院计算所，住处在计算所北边不远处，下了地铁离住处还有1.6km，一路走的好辛苦，在路上见到了中科院的两个研究所，当时我就惊呆了</p><a id="more"></a><p><img src="http://obt165s4s.bkt.clouddn.com/IMG_01.jpg" alt="IMG_01"></p><p><img src="http://obt165s4s.bkt.clouddn.com/IMG_02.jpg" alt="IMG_02"></p><p>大名鼎鼎的中科院研究所就长这样？</p><p><img src="http://obt165s4s.bkt.clouddn.com/Blackwenhao.jpeg" alt="Blackwenhao"></p><p>赶上我老家危楼了都(╯°□°）╯︵┻━┻中科院怎么这么不注意自己的门面，简单翻新一下，冲刷一遍油漆也不至于这么磕碜，这样看起来给人的感觉简直快穷过我了。还没开课心先凉了一半，不过晚上去计算所踩点发现那边的群楼还是蛮高大上的。今天忘记了拍照片，</p><h2 id="一"><a href="#一" class="headerlink" title="一"></a>一</h2><p>今天上课，五天要做的项目是“车牌识别系统”，工具 MATLAB，所以时间还是很紧张，今天的作业做到晚上10点40，终于才能回住处开始写文章。一起培训的一共只要五个人，我和一个小哥一组，MATLAB 都没怎么用过，所以做作业的时候简直一脸懵逼，发现 Google 就是亲爹啊！</p><p>机器视觉现在用的也是机器学习，最流行的是当前大热的深度学习，我们最终的任务也是给电脑一个训练集，等他好好学习，就认识车牌啦！</p><p>电脑与我们无冤无仇我们却还逼他好好学习，真是人性的沦丧，道德的丢失╭∩╮（︶︿︶）╭∩╮</p><p>任务重也好，课下多学点东西，这次假期结束熟练 MATLAB 应该不成问题了吧。</p><p>今天好累，就先写到这</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;趁着他们都去度假了，看看我们这几天能够做成什么&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;零&quot;&gt;&lt;a href=&quot;#零&quot; class=&quot;headerlink&quot; title=&quot;零&quot;&gt;&lt;/a&gt;零&lt;/h2&gt;&lt;p&gt;昨天从济南千里迢迢终于来到了北京，感谢梦瑶大头曹同学不远万里去车站接我，虽然等了好久= =！&lt;/p&gt;
&lt;p&gt;实习地点在中科院计算所，住处在计算所北边不远处，下了地铁离住处还有1.6km，一路走的好辛苦，在路上见到了中科院的两个研究所，当时我就惊呆了&lt;/p&gt;
    
    </summary>
    
      <category term="Proactive" scheme="http://zhstark.com/categories/Proactive/"/>
    
    
  </entry>
  
  <entry>
    <title>一个科学方法论</title>
    <link href="http://zhstark.com/2016/09/19/%E4%B8%80%E4%B8%AA%E7%A7%91%E5%AD%A6%E6%96%B9%E6%B3%95%E8%AE%BA/"/>
    <id>http://zhstark.com/2016/09/19/一个科学方法论/</id>
    <published>2016-09-19T23:28:35.000Z</published>
    <updated>2016-09-19T11:34:16.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>“哎，你们单位今年中秋发的啥？”<br>“发的天空二号～”</p></blockquote><a id="more"></a><p>「天空二号」在中秋节成功发往太空，可喜可贺，也辛苦了工作人员。「天空二号」能够发射成功，离不开控制论的发展与应用。而控制论中的一个重要概念「负反馈」起到了举足轻重的作用。</p><p>「负反馈调节」是控制理论中的重要组成部分，而这一思想，通过「<strong>它还能用在哪</strong>」的思考后，我发现在现实中，不仅有很多事物正在应用它，我们也可以主动用这一科学方法论来指导我们的行动。</p><h2 id="什么是负反馈"><a href="#什么是负反馈" class="headerlink" title="什么是负反馈"></a>什么是负反馈</h2><p>拿今年中秋节发射的天空二号来说吧。天空二号发往目的运行轨道，不是最开始就朝着目标方向发射出去就不管了，而是在发射的过程中，火箭不断地对自己的姿态进行校正，让自己朝正确的方向飞行，而之所以能这样做，就是因为它可以检测自己当前的飞行状态与目的地的关系，由此来校正姿态使自己不会跑偏。这个「检测」—>「校正」的动态过程便是负反馈。</p><p>想想老鹰捉小鸡，老鹰在天上飞，看到地上有一只萌萌哒的小鸡，老鹰“嗖”地一下俯冲下去，准确地捕捉到了小鸡。显然，老鹰不是按照事先计划好的路线飞行的，因为受各种随机因素的影响，如果老鹰从空中确定方向和速度等不再更改，那么它是不会抓住小鸡的。</p><p>老鹰看到小鸡后，马上估算一下相对位置和大致距离，然后选择一个大致的方向飞向小鸡，在这个过程中，老鹰一直用眼睛盯着小鸡，报告大脑它与小鸡之间的位置关系，由此不断调整飞行方向和速度，最终准确捕捉到小鸡。</p><p><img src="http://obt165s4s.bkt.clouddn.com/负反馈.jpg" alt="负反馈"></p><p>我们简单分析一下这个控制系统，老鹰在眼睛盯住小鸡的同时，也注意到了自己的位置，并将两者位置进行比较，图中的“Θ”是一个比较器，经过比较后的信号代表老鹰的位置与小鸡的位置的差值，我们称其为“目标差”，眼睛主要是接收这种目标差信息，并把它传递给大脑。大脑指挥翅膀，从而控制老鹰向目标差小的方向运动，这个过程重复进行，构成了老鹰捉小鸡的连续动作。这里最关键的一点是大脑的决定始终使老鹰的位置向减小目标差的方向改变，控制论中把这类控制过程称为「<strong>负反馈调节</strong>」。负反馈调节的本质在于设计了一个使目标差不断减小的过程，通过系统不断把自己控制后果与结果相比较，使得目标差在一次一次控制中慢慢减少，最终达到控制的目的。</p><h2 id="它是怎么工作的"><a href="#它是怎么工作的" class="headerlink" title="它是怎么工作的"></a>它是怎么工作的</h2><p><img src="http://obt165s4s.bkt.clouddn.com/老鹰捉小鸡.jpg" alt="老鹰捉小鸡"></p><p>我们把老鹰的动作看成一系列俯冲动作的连续，每一次俯冲都可以看成对自己位置的控制。老鹰的控制能力是有限的，他不可能一次到达目标，老鹰从高空冲向小鸡，它这一次飞行的能力只能让它达到 B 区域，不能抓住小鸡。如果在一次俯冲后，老鹰用过判断，反馈，马上进行第二次动作，将范围再次缩小到 A 区域，由此往复，精度越来越高，最终使老鹰准确地捉到小鸡。由于实际上老鹰的俯冲动作是连续的，所以我们看起来就像是一步到位。</p><h2 id="对我们有何指导意义"><a href="#对我们有何指导意义" class="headerlink" title="对我们有何指导意义"></a>对我们有何指导意义</h2><p>导弹、火箭、卫星其实都用了这套方法，但这些高大上的东西对我们来说好像并卵。其实我们生活中，我们身边也有好多这个方法的应用。比如我们最熟悉的 app 迭代，为什么一个 app 会一次又一次的更新，其实就是在一个版本发布后，开发者从用户那里得到反馈，反馈指导开发者们对产品进行修改，再发布，再反馈，循环往复，使一个 app 越来越好用。</p><p>但我们不是移动 app 开发者，那么我们又能用这套理论做什么呢？</p><h3 id="学新东西，先做起来看"><a href="#学新东西，先做起来看" class="headerlink" title="学新东西，先做起来看"></a>学新东西，先做起来看</h3><p>知道为什么老师总说“先用起来”，而不是“学起来”吗？这就有「负反馈」的理论在里面。</p><p><strong>做起来看</strong>，我们做一件没有做过的复杂的事情，总不能把一切安排的周周道道的，客观事物总是在不断变化的，意外的情况也在不断发生，即使我们事先考虑得再周密，也会遇到一些不可预测的麻烦来干扰我们。因此最好的办法就是干起来再说。一边干一边观察，（<em>所以不能闭着眼干，要注意出乎其外，注意反馈</em>）随时修正自己的行动和方法，采取一步一步的办法逼近目标。</p><p>我们在最开始学习一个陌生的事物时总是感觉无从下手，就像老鹰盘旋在上空，它还没有发现隐藏在树林里食物。我们要做的就是随便找一个入口下手，可能我们最开始的计划就是从豆瓣中找一本评分最高的书，看上他那么几章，然后我们就发现我们要抓的小鸡了。</p><h3 id="不断修改计划"><a href="#不断修改计划" class="headerlink" title="不断修改计划"></a>不断修改计划</h3><p><img src="http://obt165s4s.bkt.clouddn.com/负反馈2.jpg" alt="负反馈2"></p><p>之前我们总是一开始就设定好目标，立马列好计划，然后按着计划去行动，结果总是失败的，或者是失败居多，其实不是我们计划列的不对，不合理，不是我们列计划内容得问题，而是我们列计划方式的问题。</p><p>一开始我们就像那个在天上刚刚看到小鸡的老鹰，我们发现了小鸡（设定好了目标），然后找到一个方向朝着小鸡俯冲过去（设定好了计划并去执行），然而如果过程不加调整，你能抓到小鸡的可能性是很小的，风的影响，树叶的干扰，小鸡在某个时间发现了老鹰，到会让你捕捉失败。即你第一次设定的计划是很难达到预想的效果的，有种种随机因素的影响，以及一开始设定计划时也可能会忽略某些因素，都会让你前进的方向并非直至目标。</p><p>所以，在行动的过程中要不断观察周围，根据实际情况再对原计划进行改动，从而行成负反馈。这样，我们前进的方向才能越来越朝向我们最开始设定的那个精确点，而不是落到周围圆内的某一点。</p><p>以前父母总是教育我们：</p><blockquote><p>定好目标，列好计划，然后严格地按照计划去执行</p></blockquote><p>其实，这样是 TM 绝对不会完成目标的，除非这个目标是小而近的，就像你已经到达 A 区了再捕捉小鸡。</p><p>实现任何一个稍微长远一点的目标，或者进入一个十分陌生的领域，我们最开始列的计划是不能一成不变的从头执行到尾的。因为我们对其了解不够，我们的计划不够完美，不够贴合现实，我们需要在前进的过程中获取更多信息来指导修正我们的计划。</p><p>只有不断地获得负反馈，不断依靠反馈对自身进行指导，我们才会越来越贴近最终的目标。</p><h2 id="想想还能用在哪？"><a href="#想想还能用在哪？" class="headerlink" title="想想还能用在哪？"></a>想想还能用在哪？</h2><ul><li>演讲者观察听众调整演讲</li><li>老师观察学生调整上课节奏</li><li>打球过程中根据球员状态和对手水平调整战术</li><li>……</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;“哎，你们单位今年中秋发的啥？”&lt;br&gt;“发的天空二号～”&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Proactive" scheme="http://zhstark.com/categories/Proactive/"/>
    
    
  </entry>
  
  <entry>
    <title>《如何高效学习》读书感悟</title>
    <link href="http://zhstark.com/2016/07/31/%E3%80%8A%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E5%AD%A6%E4%B9%A0%E3%80%8B%E8%AF%BB%E4%B9%A6%E6%84%9F%E6%82%9F/"/>
    <id>http://zhstark.com/2016/07/31/《如何高效学习》读书感悟/</id>
    <published>2016-07-31T21:26:29.000Z</published>
    <updated>2016-08-14T15:55:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/EFxqDRU.png" alt=""></p><p><img src="https://d17oy1vhnax1f7.cloudfront.net/items/442a191O1d143N3d2E2j/FullSizeRender.jpg?v=30d04b3b" alt=""></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>读书如果仅仅是「读」，那是远远不够的。「读」只是简单地「输入」，有时候甚至连「输入」都谈不上吧。「输入」本身没有任何作用，就像如果你有了很多很多钱，只是把它藏起来，压箱底，那这些钱是没有任何作用的，你不去花掉它，不去<strong>利用</strong>它，这钱甚至连垃圾都不如罢，垃圾还能回收利用呢。（当然，应急钱除外）</p><p>有了「输入」之后呢？<a id="more"></a> 要思考，将信息进行处理。原材料有了，把它加工出来才有价值。「思考」这一步是很累的。有的人读书很快，而且感觉读书很轻松，就是因为他们没有「思考」这一步，读完了，就算完了。感受自动分泌的多巴胺给我们的快感很容易，而主动思考就不简单了。没有「思考」就只能享受生动热烈的内容场面本身带来的快感，无法感悟里面所蕴含的理念、精神。所以，读书应该不是轻松加愉快的，而是很累的一件事。特别是读一本好书，一遍往往不能汲取他的精华，因为人总是会有遗忘，总是会有某些时刻思维不够敏捷，以至于当时无法感悟那部分内容奥妙与精彩。</p><p>「思考」之后呢？将浓浓思想如泉涌化为内力，总有一天练就九阳神功？所谓「学以致用」，思考之后当然要「实践」，想想如何使用它，至少，如果觉得很有价值，可以把它分享出来。知识，传播的越广越有价值。另外，在「实践」的过程中，又会有一些事情发生，反馈，使你再次回到「思考」这步。刺激你“开天眼”。</p><p>用计算机的方法说，可以是：「输入」-「处理」-「输出」</p><p>为什么讲一本书的读后感会扯到我对读书的看法呢？因为这本书讲的学习方法，跟我上面讲的很相似，或者说，他的方法更加细致全面。读这本书，我个人建议慢慢地，思考着读。</p><blockquote><p><em>在「输入」阶段，就大学生阶段而言吧，大多数大学生的「输入」来源就是教材和网络了。但是大多数大学教材都是自己大学的教授所写，不敢说不好，至少有很大的局限性。所以我建议买一些其他口碑好的教材，这其实就是增加「输入渠道」，让自己获取的信息更加准确，全面，优质。</em></p></blockquote><hr><h2 id="正题"><a href="#正题" class="headerlink" title="正题"></a>正题</h2><p>先解释一下书名吧，原文是 『 Learn More Study Less 』，“learn” 和 “study” 都是学习，但 “learn” 强调的是结果，“study” 强调的是过程。所以，这个书名的直译应该是『花更少时间学到更多东西』。而这就产生了<strong>效率</strong>。</p><p>简单讲，这本书就是讲了一些可以帮助我们快速学习概念和相应的方法论。这些概念中有一部分我也确实发现自己应用过，但是没有系统的整理和总结。而其方法论中，有一些我在应用，有一些我从未意识到可以这样，还有一些更高级的方法论，我甚至发现在«生活大爆炸»中的谢尔顿的一些方法就是如此。</p><h3 id="一-思想"><a href="#一-思想" class="headerlink" title="一. 思想"></a>一. 思想</h3><p>有时候一本书其实就是讲一句话。比如《把时间当朋友》只讲两个字「积累」，《挤挤都会有的》只讲一个字——「挤」。</p><p>我认为这本书其实也可以压缩为两个字：<strong>「联系」</strong>。并提出了一个概念：「整体性学习」。之前我接触过一个概念，叫「系统性学习」，「系统性学习」强调要把一个学科所学过的知识点上下联系起来，形成一个系统，你的思路可以在这个系统里跑通，但并不强调各个系统之间的关联。</p><p><img src="https://cl.ly/3o0p0h421x3E/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-04-21%20%E4%B8%8B%E5%8D%885.55.06.png" alt=""></p><p>而「整体性学习」思维更加强大，你的程序(思维)不仅要在这一个学科的「系统」里跑，还要跑到其他学科的系统里。正所谓<strong>融会贯通</strong>。有一种思维又高了一个维度的感觉。</p><p>简单说，「整体性学习」也很像分布式网络：</p><p><img src="https://cl.ly/0H1q2D1t1h3G/%E5%88%86%E5%B8%83%E5%BC%8F%E7%BD%91%E7%BB%9C.jpg" alt=""></p><p>只不过所链接的不再是网络节点，也不是人，而是一个个的概念，知识点。当学习了一个新东西，要想着如何把他和之前懂得的东西建立联系，甚至要跨界跨学科建立联系。这样，在你试图将这些知识联系起来的时候，你不仅加深了对两个系统的理解，有时候还会惊喜的发现自己感悟出了新知识。</p><p>作者介绍了三个整体性学习的主要“观点”（总觉这个翻译不太合适）和类比于做饭而产生的五个顺序步骤。</p><p><img src="https://cl.ly/0P3D1k1S3k27/%E5%90%83%E9%A5%AD%E6%A8%A1%E5%9E%8B%E6%B3%95.png" alt=""></p><p>不过最后又增添了第六个步骤——测试。是问自己几个问题。个人感觉颇为收益，每次学习新东西的时候都可以问问自己，现摘录如下</p><blockquote><p>获取阶段的测试——我以前看过或听过这个知识吗？  </p><p>理解阶段的测试——我理解知识的含义吗？（至少是字面上的意思。）  </p><p>拓展阶段的测试——我知道知识从何而来，与哪些知识有关系吗？  </p><p>纠错阶段的测试——我删除了那些不恰当的联系吗？我删除了那些错误结论吗？  </p><p>应用阶段的测试——我将知识用到实际生活中了吗？</p></blockquote><p>这本书讲了几种思考方式记忆方式，使用了大量的比喻和类比。其实比喻和类比本身就是很强大的学习方法。</p><p>有些方法是我们耳熟能详甚至听腻掉的，比如记公式要知道公式的“所以然”，理解公式里每个字母所代表的含义。以前我总是不以为意，心想这该多累多麻烦啊，那些天才肯定有更好更方便的方法。最终发现，那些天才也是这样罢。但这种方法并不省时啊，相反我要花费很长时间才能理解这个公式的由来和这些fucking字母的含义。我现在认为是因为他们从小如此思考，已经训练出了比我们更快的思考速度。当然了，我相信我们通过长时间使用这种思考方法，也可以加快我们的思考速度和理解速度，一切都可以练出来。</p><p>现实版钢铁侠 Elon Musk 也说了，他最赞同的思维模式是 “First principle thinking”。</p><blockquote><p>在TED的采访中，他坦言自己最赞同的思维模式是 “First principle thinking”。 “First principle thinking” 的详细解释和如何运用我会在另外的问题专门回答。简单说来，First principle thinking 就是从事物最基本的公理为出发点来进行推导的思维方式。其对立的方法是 Analogy（类推法），简单说来就是别人或者其他事物如何如何，所以我也要如何如何。</p><p>举例说明：“现在我有1万刀的现金想投资股票，我应该买什么股票？”</p><p>Analogy ：“别人家之前买了这几支股票，赚了不少，或者我旁边有个股票大神也买了这几个股票，赚了，所以我也准备买这几个股票。”</p><p>First principle thinking：“首先去弄明白股票的原理，看清股票涨跌的本质，然后分析公司的背后价值，接着根据自己的需求，看自己是想长久投价值，然后在A股市场利用趋势捞一波。当然也有可能，在分析过程中发现股票市场的风险大小超过了自己的承受范围，从而放弃投资股票。转而杀入债市或者定期投资等。”  </p><p>节选自知乎专栏-覃超帝国兴亡史<br><a href="http://zhuanlan.zhihu.com/p/20134060" target="_blank" rel="external">链接点这里</a></p></blockquote><p>牛人的思维方式总是类似的。想想小时候嫌麻烦懒得思考，幻想有什么奇技淫巧能轻松愉快地记下来，最终不过是死记硬背甚至打小抄真是可笑。哪有什么奇技淫巧，脚踏实地才是王道。</p><hr><h3 id="二-方法"><a href="#二-方法" class="headerlink" title="二. 方法"></a>二. 方法</h3><p>作者将信息分类，针对不同类别提出了不同的技巧来记忆。</p><p>作者介绍了四个部分的方法：</p><ol><li>获取知识  <pre><code>快速阅读  笔记流</code></pre></li><li>联系观点  <pre><code>比喻  内在法  图表法</code></pre></li><li>随意信息的处理  <pre><code>联想法  挂钩法  信息压缩法</code></pre></li><li>知识扩展  <pre><code>实际应用  模型纠错  以项目为基础学习</code></pre></li></ol><p>具体技巧就不大段摘抄了，在此之摘录一些我个人认为很有用的问题或方法。</p><blockquote><p>进行积极阅读时你需要记下：  </p><p>（1）这一节中主要观点是什么？<br>（2）我怎样才能记住主要观点？<br>（3）我要怎样将主要观点拓展开以及应用它。</p></blockquote><p><em>通过问自己这些问题，回答清这些问题，可以让自己<strong>真正</strong>地“吃透”文章的内容</em></p><blockquote><p>怎样进行内在化</p><p>（1）明确你要内在化的概念。这是一个生物过程，还是编程中的函数或者是一个数学概念？</p><p>（2）从建立脑海中的图像开始。如果你不习惯内在化，可以先试着在纸上画出概念的粗略图，多次尝试后，你就会直接在脑海中想象了。</p><p>（3）脑海中的图像是静态的，还是栩栩如生的动态场景？掌握一个行列式需要好几个步骤，所以要让图像动起来，就仿佛在看一部电影一样。</p><p>（4）现在开始加上其他感官。试着用手去拿它，去摸它，去打开它，去嗅它的味道，去听它的声音，动用你身体的所有感官，将所有的感觉与运动的图像相联系。</p><p>（5）加入更多的感觉或情感。</p><p>（6）不断重复和优化图像，直到你一想到它就能很快地回忆起知识。</p></blockquote><p><em>在«生活大爆炸»中，谢尔顿曾说自己脑中呈现了高清图像，在帮拉杰看观测数据时，他分分钟找到了异常数据，因为质数是粉色的，还有什么气味（具体记不清了）。这不就正是内在化么。这种丰富而又强大的联系极大地帮助了我们记忆与理解问题。</em></p><h3 id="三-费曼技巧"><a href="#三-费曼技巧" class="headerlink" title="三. 费曼技巧"></a>三. 费曼技巧</h3><p><img src="https://cl.ly/42121C162o3p/%E8%B4%B9%E6%9B%BC.png" alt=""></p><p>费曼的一生就是个大写的<strong>牛逼</strong>，是我最崇拜的现实人物之一。如果想了解这个疯子可以阅读下面的链接：</p><blockquote><p><a href="http://www.zhihu.com/question/23916191/answer/26092786" target="_blank" rel="external">http://www.zhihu.com/question/23916191/answer/26092786</a></p></blockquote><p>下面是费曼技巧的流程：</p><blockquote><p>第一步：选择要学习的概念<br>首先选好你打算深入理解的概念，拿一张空白纸，在最上方写下概念的名称。  </p><p>第二步：设想你是老师，正在试图教会一名新生这个知识点<br>这一步你要假想自己费尽口舌让一名毫无这方面知识的学生听懂，并把你的解释记录下来。这一步至关重要，因为在自我解释那些你理解或不理解的知识过程中，你会理解得更好，而原先不明白的地方也得以理清。  </p><p>第三步：当你感到疑惑时，返回去吧<br>每当你碰到难题感到疑惑时，别急着往下走，学习不是单行道，回过头来，重新阅读参考材料、听讲座或找老师解答，直到你觉得搞懂了为止，然后把解释记到纸上。  </p><p>第四步：简单化和比喻<br>如果你的解释很啰唆或者艰涩，尽量用简单直白的语言重新表述它，或者找到一个恰当的比喻以更好地理解它。</p></blockquote><p>其实除了「内在化」以外，「教」也是一种很好的学习方法。「教」也可以帮助自己理解问题，更重要的是，在教授的过程中，我们必须对每一个知识点都很熟悉，这时候只是感觉自己理解了是远远不够的，只要理解透彻了，我们才有能力将其清楚地表达出来，让别人明白。不记得是从哪看到的了：<em>真正的大师讲出来的相对论可以让保姆听得懂</em>。自己理解是一个阶段，而能清晰表达出来就是另一个境界了。这也是为什么那些爆满的课堂的老师都是大师级人物的原因。在自己教授自己的过程中，我们很容易发现自己知识的缺失。</p><p>费曼技巧中的第二步，有一些 “元编程” 的意味。自己教自己，像极了程序员桌子上的小黄鸭。</p><p>其实所谓的「学习效率」，我认为是一个伪概念，就像「阅读速度」一样，其实「阅读速度」的本质是「理解速度」，理解得快，阅读得必然快。不然你说怎么叫 “读的快”？眼珠盯着一个个的字转得快？手指一页一页翻得快？你看了字不一定算阅读，你翻了好多页也不一定叫阅读，只有理解了文字所表达的意思，才算阅读。而「学习效率」的本质我认为应该是「思考速度」。要学懂一个东西我们需要理解，需要用到联想，需要纠错，需要应用。而这些都需要我们极力思考才行。费曼技巧没有提供什么捷径，相反最开始使用我们会发现非常吃力，因为需要我们思考的地方太多。而当我们习惯用这种方法思考后，就会发现 “学习速度” 快了好多。</p><h2 id="部分方法摘录"><a href="#部分方法摘录" class="headerlink" title="部分方法摘录"></a>部分方法摘录</h2><p>书中最后讲了一些方法和理念，一部分我感觉非常好，值得一试，就摘录如下分享给大家。</p><blockquote><p>周/日目标体系<br>周/日目标体系是我知道的最好的对抗延迟的方法，办法很简单：  </p><p>1.每周周末，列一个清单，包括所有的任务、作业以及你想在下周完成的读书和学习活动。<br>除非在一周内出现意想不到的事情，否则你就有责任完成这个清单，不过也不必超过清单所规定的任务。这样做就把无限的工作分割成在一周内可以完成的子任务。如果这一周特别忙碌，你可能会推迟完成任务。如果这一周很清闲，你可能会提前完成任务。  </p><p>2.每天晚上，检查周计划，列出每日目标清单。<br>下一步是将每周的工作分配到每一天，你要确保完成每日的工作清单，但是不必超过它。</p><p>周/日目标系统有什么好处？<br>（1）可以缓解你作决策的应激。你只需检查清单，就明白是否完成。<br>（2）防止你做一项大任务时耽搁不前，依赖每周和每日目标清单，而不是截止日期，你会有时间紧迫感。<br>（3）帮助分配你的工作量。通过制订计划，你可以将工作适当分配到周和日，不需要考试前熬通宵而前三周一个字不看，你可以细分工作。</p><p>提髙注意力阈值。注意力阈值就是指集中完成某项工作的最长时间，超过这个时间，注意力就急剧下降。通过不断接受越来越多的批处理，你可以逐渐提高你的注意力阈值。阈值越高，表示能一次完成的工作量也越大。</p></blockquote><p><em>现在都流行什么番茄工作法，一次工作25分钟，就好像很厉害了的样子。其实想想高中的时候，一坐一晚上几个小时都能精力高度集中完成任务。只是随着智能手机和互联网的发展，我们经常被一些无关痛痒的消息打断，导致我们难以集中精力，注意力阀值降低。提高自己的注意力阀值，be focus，你最终发现番茄工作法什么的弱爆了。</em></p><blockquote><p>下面介绍一些你需要知道的保持高效率的建议。<br>（1）是每天学一点还是考前抱佛脚？看起来后者节约时间，实际上前者才是高效率。<br>（2）你的笔记和课本组织得好吗？虽然我喜欢一次学习就搞定它，但是有时候我们还是需要复习，假如学习材料凌乱无序，肯定会浪费时间。材料越有组织，复习起来压力越小。<br>（3）学习时注意力高度集中，还是左顾右盼、三心二意？我学习时从不听音乐、玩手机或看信息，我总是尽量找一个没有人的地方学习。</p></blockquote><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这本书虽然看起来很薄，但是介绍的方法和内容比较多。看的时候感觉很好很有道理值得应用，但实际操作起来容易遗忘和忽略一些部分，所以我建议要时不时地温习。</p><p>在书中后半部分有讲 “不要学习”，其实这就体现了翻译的局限性，“learn” 和 “study” 都翻译为 “学习”，而一个强调学习结果，一个强调你在 “学习”(看起来在学习)的过程。在 “不要学习” 这一部分中的 “学习” 指的是 “study”。</p><p>工具的产生极大地提高了人类的工作效率和生产力。而此书所介绍概念、方法，就是我们学习过程中可以利用的强大工具。</p><p>但是，工具不是一切，不能纠结于工具本身。最重要的还是我们要有「终身学习」的信念 (注意，我不是说观念)。</p><p>工具是好的，但不是一切都决定于工具。又想起来《蝙蝠侠五》中忍者大师教给韦恩的那句话：「<em>Skill is nothing, will is everythin.</em>」</p><p>学习是一辈子的事情。随着互联网的发展与普及，还有在线支付功能的完善，「知识变现」变得越来越容易。学点东西，开始更加明显地提高我们的生产力。这本书不光提供我们一些方法，也能激起我们学习的热情。</p><p>努力学习，追求进步。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://i.imgur.com/EFxqDRU.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://d17oy1vhnax1f7.cloudfront.net/items/442a191O1d143N3d2E2j/FullSizeRender.jpg?v=30d04b3b&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;读书如果仅仅是「读」，那是远远不够的。「读」只是简单地「输入」，有时候甚至连「输入」都谈不上吧。「输入」本身没有任何作用，就像如果你有了很多很多钱，只是把它藏起来，压箱底，那这些钱是没有任何作用的，你不去花掉它，不去&lt;strong&gt;利用&lt;/strong&gt;它，这钱甚至连垃圾都不如罢，垃圾还能回收利用呢。（当然，应急钱除外）&lt;/p&gt;
&lt;p&gt;有了「输入」之后呢？
    
    </summary>
    
      <category term="生活" scheme="http://zhstark.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="读书" scheme="http://zhstark.com/tags/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>用IAR写汇编</title>
    <link href="http://zhstark.com/2016/07/25/%E7%94%A8IAR%E5%86%99%E6%B1%87%E7%BC%96/"/>
    <id>http://zhstark.com/2016/07/25/用IAR写汇编/</id>
    <published>2016-07-25T22:50:37.000Z</published>
    <updated>2019-02-08T21:32:26.926Z</updated>
    
    <content type="html"><![CDATA[<h2 id="version：IAR7-5"><a href="#version：IAR7-5" class="headerlink" title="version：IAR7.5"></a>version：IAR7.5</h2><h3 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h3><p>具体参见百度经验前四步。戳→<a href="http://jingyan.baidu.com/article/a3a3f8118e31468da3eb8a55.html" target="_blank" rel="external">这里</a>。<br>其中，在创建工程时，选择 asm 如图</p><p><img src="https://cl.ly/12191O460r0k/1.png" alt="1.png"></p><a id="more"></a><p>然后界面变成这样：<br><img src="https://cl.ly/3o0v3Y2L3Q2z/2.png" alt="2.png"></p><p>删掉它自带的代码，改为下列代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">MODULE  ?cstartup</div><div class="line"></div><div class="line">       ;; Forward declaration of sections.</div><div class="line">       SECTION CSTACK:DATA:NOROOT(3)</div><div class="line"></div><div class="line">       SECTION .intvec:CODE:NOROOT(2)</div><div class="line"></div><div class="line">       ;EXTERN  __iar_program_start        </div><div class="line">       PUBLIC  __vector_table</div><div class="line"></div><div class="line">       DATA</div><div class="line"></div><div class="line">   __vector_table</div><div class="line">       DCD     sfe(CSTACK)</div><div class="line">       DCD     Reset_Handler             ; Reset Handler</div><div class="line"></div><div class="line">   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</div><div class="line">   ;;</div><div class="line">   ;; Default interrupt handlers.</div><div class="line">   ;;</div><div class="line">         THUMB</div><div class="line"></div><div class="line">       PUBWEAK Reset_Handler</div><div class="line">       SECTION .text:CODE:NOROOT:REORDER(2)</div><div class="line">   Reset_Handler</div><div class="line">       ;LDR     R0, =__iar_program_start</div><div class="line">       ;BX      R0</div><div class="line">         ;在这里放置汇编语言测试代码</div></pre></td></tr></table></figure><p>再建一个文件，main.c，并添加到工程中，参考之前的百度经验链接第六、七步。</p><p>在 main.c中写一个 main 函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">int mian()</div><div class="line">&#123;&#125;         //内容随意，可空</div></pre></td></tr></table></figure><h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><p>对工程点右键，选择“<strong>Options</strong>”，</p><p><img src="https://cl.ly/2k2t2E1G2J2s/3.png" alt="3.png"></p><p>然后将各位置的配置修改为同下图：</p><p><img src="https://cl.ly/2p2w1y1V3F3J/4.png" alt="4.png"></p><p><img src="https://cl.ly/0J3t3t1j320O/5.png" alt="5.png"></p><p><img src="https://cl.ly/0k0y2O1e2F1m/6.png" alt="6.png"></p><p><img src="https://cl.ly/1o2n3G1j3s08/7.png" alt="7.png"></p><p><img src="https://cl.ly/37360Q30341D/8.png" alt="8.png"></p><p><img src="https://cl.ly/223k043G2c2K/9.png" alt="9.png"></p><p>然后就可以写汇编了~</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;version：IAR7-5&quot;&gt;&lt;a href=&quot;#version：IAR7-5&quot; class=&quot;headerlink&quot; title=&quot;version：IAR7.5&quot;&gt;&lt;/a&gt;version：IAR7.5&lt;/h2&gt;&lt;h3 id=&quot;创建工程&quot;&gt;&lt;a href=&quot;#创建工程&quot; class=&quot;headerlink&quot; title=&quot;创建工程&quot;&gt;&lt;/a&gt;创建工程&lt;/h3&gt;&lt;p&gt;具体参见百度经验前四步。戳→&lt;a href=&quot;http://jingyan.baidu.com/article/a3a3f8118e31468da3eb8a55.html&quot;&gt;这里&lt;/a&gt;。&lt;br&gt;其中，在创建工程时，选择 asm 如图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cl.ly/12191O460r0k/1.png&quot; alt=&quot;1.png&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="记录" scheme="http://zhstark.com/categories/%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="tech" scheme="http://zhstark.com/tags/tech/"/>
    
  </entry>
  
</feed>
